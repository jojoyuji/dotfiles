call plug#begin(g:configpath.'vim/bundle')

"GIT
" Fugitive    
" Plug 'tpope/vim-fugitive', { 'tag': 'v2.4' }
"
Plug 'tpope/vim-fugitive'
let g:fugitive_pty = 0
" autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
" nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Gpush origin HEAD
nnoremap <leader>gl :Gpull
Plug 'tpope/vim-dispatch'
"Gitgutter 

Plug 'airblade/vim-gitgutter' 
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual

"Colorthemes 
Plug 'dracula/vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'sainnhe/edge'
let g:edge_style = 'neon'

let $NVIM_TUI_ENABLE_TRUE_COLOR=1
if (has("termguicolors"))
  set termguicolors
endif
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


Plug 'jojoyuji/gruvbox'
Plug 'lifepillar/vim-gruvbox8' 
"let g:gruvbox_italic=0
"let g:gruvbox_invert_selection=0
let g:gruvbox_contrast_dark='hard'

"Movements
Plug 'tpope/vim-surround'
Plug 'rhysd/clever-f.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'zoubin/vim-gotofile'

" Navigation 
Plug 'mileszs/ack.vim' 
Plug 'dietsche/vim-lastplace'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'romainl/vim-qf'

" Narrow 
Plug 'kana/vim-narrow' 
let g:narrow_allow_overridingp = 1
vmap <cr> :Narrow<cr>
"FZF                                                                                                
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
" let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

nnoremap <leader>mr :History<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>pf :GitFiles<cr>
nnoremap <leader>ag :GitAg<cr>
nnoremap <C-p>  :FZFYank<cr>
nnoremap <f12> :Colors<cr>

autocmd VimEnter *
      \ command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>, '', { 'options': '--bind ctrl-f:select-all,ctrl-d:deselect-all' }, <bang>0)

command! -bang -nargs=* GitAg
      \ call fzf#vim#ag(<q-args>, {'dir': systemlist('git rev-parse --show-toplevel')[0]}, <bang>0)

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"NERDTree                                                                                                       
Plug 'jojoyuji/nerdtree-async' ", { 'on':  'NERDTreeToggle' }
Plug 'nerdtree-execute' ", { 'on':  'NERDTreeToggle' }
Plug 'tyok/nerdtree-ack' " , { 'on':  'NERDTreeToggle' }
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeChDirMode=2
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"closes nerdtree on tab
autocmd FileType NERDTree nmap <tab> q
"map <silent> <leader><tab>  :NERDTreeToggle<cr>
map <bs> :call RcsyncTree()<cr>
map <silent> <leader><tab>  :call RcsyncTree()<cr>
"map <silent> <bs>  :call RcsyncTree()<cr>
map <silent> <leader><leader><tab> <nop>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction
"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0 && !&modifiable
    NERDTreClose
  elseif &modifiable 
    NERDTree %:p:h
  else
    NERDTreeClose
  endif
endfunction

"Bookmarking                                                                                                    
Plug 'MattesGroeger/vim-bookmarks'

nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mn <Plug>BookmarkNext
nmap <Leader>mb <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
highlight BookmarkSign ctermbg=NONE ctermfg=198
highlight BookmarkLine ctermbg=198 ctermfg=NONE
let g:bookmarking_menu = 1
let g:bookmark_manage_per_buffer = 0
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = 'â™¥'
let g:bookmark_location_list = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nmap <leader>mm :BookmarkToggle<CR>
  nmap <leader>mi :BookmarkAnnotate<CR>
  nmap <leader>mn :BookmarkNext<CR>
  nmap <leader>mp :BookmarkPrev<CR>
  nmap <leader>ma :BookmarkShowAll<CR>
  nmap <leader>mc :BookmarkClear<CR>
  nmap <leader>mx :BookmarkClearAll<CR>
  nmap <leader>mk :BookmarkMoveUp<CR>
  nmap <leader>mj :BookmarkMoveDown<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap <leader>mm
  unmap <leader>mi
  unmap <leader>mn
  unmap <leader>mp
  unmap <leader>ma
  unmap <leader>mc
  unmap <leader>mx
  unmap <leader>mk
  unmap <leader>mj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()

"Indentation 
"Align                                                                                                     
Plug 'vim-scripts/Align'
if exists(":Align")
  noremap <leader>t :Align 
  noremap <leader>a :Align 
endif
Plug 'tommcdo/vim-lion'
Plug 'maksimr/vim-jsbeautify' , { 'for': [ 'html', 'css', 'stylus', 'scss', 'less'] }

Plug 'w0rp/ale', { 'for': [ 'html', 'css', 'stylus', 'scss', 'less', 'javascript', 'stylus', 'vue'] }

let g:ale_fixers = {
      \ 'javascript': ['eslint'],
      \ 'vue': ['eslint', 'stylelint']
      \ }

let g:ale_linters = {
      \   'javascript': ['eslint'],
      \}
let g:ale_linters_explicit = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
" Set this if you want to.
" This can be useful if you are combining ALE with
" some other plugin which sets quickfix errors, etc.
let g:ale_keep_list_window_open = 0
nmap <silent> [[ <Plug>(ale_previous_wrap)
nmap <silent> ]] <Plug>(ale_next_wrap)
autocmd BufEnter,BufNewFile,BufRead *.js noremap Q :ALEFix<cr>


Plug 'itspriddle/vim-javascript-indent', { 'for': 'javascript' }
Plug 'leshill/vim-json'
Plug 'elzr/vim-json' 
Plug 'XadillaX/json-formatter.vim', {'for': 'json', 'do': 'npm install jjson -g'}
Plug 'tpope/vim-jdaddy' ,{'for': 'json'}

"Pairing 
Plug 'Raimondi/delimitMate'
Plug 'bounceme/poppy.vim'  "show highlights on move between brackets, etc
let g:poppy_point_enable = 1
"TextObjects
Plug 'kana/vim-textobj-user'
Plug 'vim-indent-object'
Plug 'textobj-comment'
Plug 'hchbaw/textobj-motionmotion.vim'
Plug 'argtextobj.vim'
Plug 'kana/vim-textobj-lastpat'

"Targets.vim                                                                                                
Plug 'wellle/targets.vim'
let g:targets_quotes = '"d ''q `'
"Complete 
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}

Plug 'roxma/nvim-yarp'




Plug 'jojoyuji/megaman-vim'
Plug 'jojoyuji/nyancat-vim'

"youcompleteme mapping
imap <c-j> <c-n>
imap <c-k> <c-p>

Plug 'tyru/caw.vim'
map <leader>cc gcc
Plug 'Shougo/context_filetype.vim'

"Utilities
"
Plug 'pechorin/any-jump.vim'
let g:any_jump_disable_default_keybindings = 1
nnoremap gd :AnyJump<CR>



Plug 'frazrepo/vim-rainbow'
Plug 'romainl/vim-qf'
Plug 'tommcdo/vim-exchange'

Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'splitjoin.vim'

"Switch                                                                                                         
Plug 'AndrewRadev/switch.vim'
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] ,
      \   ['get', 'set'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['const', 'let', 'var'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed', 'static'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['min', 'max'],
      \   ['unshift', 'push'],
      \   {
      \     '"\(\k\+\)"':                '''\1''',
      \     '''\(\k\+\)''':              '"\1"\2',
      \   }
      \ ]
Plug 'vim-scripts/Gundo'
Plug 'tpope/vim-unimpaired'
Plug 'caglartoklu/launchassociated.vim'
Plug 'vim-scripts/matchit.zip'
Plug '29decibel/vim-stringify'
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/webapi-vim'
"Plug 'mattn/gist-vim'
Plug 'lambdalisue/vim-gista'
"Plug 'lambdalisue/vim-gista-ctrlp'
Plug 'diepm/vim-rest-console' 

let g:vrc_curl_opts = {
      \ '--connect-timeout' : 10,
      \ '-L': '',
      \ '-sS': '',
      \ '-i': '',
      \ '--max-time': 60,
      \ '--ipv4': '',
      \ '-k': '',
      \}

Plug 'osyo-manga/vim-over'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'wellle/tmux-complete.vim'
Plug 'christoomey/vim-tmux-navigator'

"Vimux 
Plug 'benmills/vimux'
map <leader>nt :call VimuxRunCommand("clear; npm test")<CR>
map <leader>nb :call VimuxRunCommand("clear; gulp bump-version && gulp build")<CR>
map <leader>x :VimuxPromptCommand<CR>
"ApiBlueprint 
Plug 'kylef/apiblueprint.vim' , {'do': 'brew install --HEAD  https://raw.github.com/apiaryio/drafter/master/tools/homebrew/drafter.rb'}
autocmd FileType apiblueprint nnoremap <C-b> :call GenerateRefract()<cr>

"NVIM BOOTIFUL
"Airline                                                                                                      
Plug 'bling/vim-airline'
" let g:airline_extensions = []
let g:airline_section_error   = 0
let g:airline_section_z = 0     
let g:airline_section_warning = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
let g:airline#extensions#tagbar#enabled = 0
let g:airline_highlighting_cache = 1
let g:airline_inactive_collapse=1
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
"let g:airline_left_sep = "\uE0B4"
"let g:airline_right_sep = "\uE0B6"
"
" for terminals that does not have fontpatched
"let g:airline_left_sep = ' '
"let g:airline_left_alt_sep = ' '
"let g:airline_right_sep = ' '
"let g:airline_right_alt_sep = ' '

let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

Plug 'paranoida/vim-airlineish'
"TmuxLine                                                                                                      
Plug 'edkolev/tmuxline.vim'
let g:tmuxline_preset = {
    \'a'    : '#S',
    \'win'  : ['#I', '#W'],
    \'cwin' : ['#I', '#W', '#F'],
    \'y'    : ['%R', '%a', '%Y'],
    \'z'    : '#H'}
if &term =~ '^screen' && exists('$TMUX')
au VimEnter * if exists(':Tmuxline') | Tmuxline airline_insert | endif
endif 

Plug 'junegunn/vim-emoji'
command! Emoji %s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g


"Filetype Plug
Plug 'posva/vim-vue'
let g:vue_disable_pre_processors = 1
Plug 'ap/vim-css-color'
Plug 'vim-scripts/SyntaxComplete'


"javascript libs syntax
Plug 'othree/javascript-libraries-syntax.vim' 
let g:used_javascript_libs = 'underscore,jquery,angularjs,flux,vue,react,lodash,chai,jasmine'		
Plug 'moll/vim-node' , {'for': 'javascript'}
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'jojoyuji/vim-javascript', {'for': 'javascript'}
Plug 'Quramy/vim-js-pretty-template', {'for': 'javascript'}
Plug 'heavenshell/vim-jsdoc', {'for': 'javascript'}
Plug 'kkoomen/vim-doge'
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'wavded/vim-stylus', {'for': 'stylus'}
Plug 'tpope/vim-haml'
Plug 'mustache/vim-mustache-handlebars'
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'shime/vim-livedown', {'for': ['md', 'markdown'], 'do': 'npm install -g livedown'}
Plug 'shmargum/vim-sass-colors', {'for': ['sass', 'stylus', 'styl', 'scss']}


"coc-snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

"coc-yank
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

call plug#end()

nnoremap <leader>vu :call LoadingMsg('Updating plugins...')<cr>:so $MYVIMRC<CR>:PlugUpdate
nnoremap <leader>vi :call LoadingMsg('Installing plugins...')<cr>:so $MYVIMRC<CR>:PlugInstall<cr>
nnoremap <leader>vc :call LoadingMsg('Cleaning plugins...')<cr>:so $MYVIMRC<CR>:PlugClean<cr>

" vim:  ft=vim 
