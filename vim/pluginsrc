call plug#begin('~/.vim/bundle')

"Git stuff {{{

" Fugitive                                                                                                       {{{2
Plug 'tpope/vim-fugitive'
autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Gpush origin HEAD
nnoremap <leader>gu :Gpull
"nnoremap <Leader>gp :Dispatch! git push origin HEAD<cr>
"nnoremap <Leader>gu :Dispatch! git pull<cr>
Plug 'tpope/vim-dispatch'
"}}}
"Gitgutter {{{2

Plug 'airblade/vim-gitgutter' 
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual

"}}}
"
"FZF - git stash
Plug 'aacunningham/vim-fuzzy-stash'
nnoremap <leader>gg :GStashList
nnoremap <leader>ga :GStash 
"}}}
"Colorthemes {{{ 
Plug 'cocopon/iceberg.vim' 
Plug 'dracula/vim'
Plug 'ayu-theme/ayu-vim'
"let ayucolor="mirage" " for mirage version of theme
Plug 'rakr/vim-one'

let $NVIM_TUI_ENABLE_TRUE_COLOR=1
if (has("termguicolors"))
  set termguicolors
endif
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


Plug 'jojoyuji/gruvbox'
Plug 'lifepillar/vim-gruvbox8' 
"let g:gruvbox_italic=0
"let g:gruvbox_invert_selection=0
"let g:gruvbox_contrast_dark='hard'

"}}}
"Movements{{{
Plug 'tpope/vim-surround'
Plug 'rhysd/clever-f.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'zoubin/vim-gotofile'

"}}}
" Navigation {{{1
Plug 'rbgrouleff/bclose.vim'
Plug 'mileszs/ack.vim' 
Plug 'dietsche/vim-lastplace'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'romainl/vim-qf'

" Narrow {{{2
Plug 'kana/vim-narrow' 
let g:narrow_allow_overridingp = 1
vmap <cr> :Narrow<cr>
" }}}
"FZF                                                                                                {{{2
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
nnoremap <leader>mr :History<cr>
nnoremap <leader>b  :Buffers<cr>
nnoremap <leader>pf  :GitFiles<cr>
nnoremap <leader>ag  :GitAg<cr>
nnoremap <c-p>  :FZFYank<cr>
nnoremap <f12> :Colors<cr>

autocmd VimEnter *
      \ command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>, '', { 'options': '--bind ctrl-f:select-all,ctrl-d:deselect-all' }, <bang>0)

command! -bang -nargs=* GitAg
      \ call fzf#vim#ag(<q-args>, {'dir': systemlist('git rev-parse --show-toplevel')[0]}, <bang>0)

function! s:yank_list()
  redir => ys
  silent Yanks
  redir END
  return split(ys, '\n')[1:]
endfunction

function! s:yank_handler(reg)
  if empty(a:reg)
    echo "aborted register paste"
  else
    "let token = split(a:reg, ' ')
    "execute 'Paste' . token[0]
    execute 'normal! i'.a:reg.''.strlen(a:reg).'hdt 0dw' 
  endif
endfunction


command! FZFYank call fzf#run({
      \ 'source': <sid>yank_list(),
      \ 'sink': function('<sid>yank_handler'),
      \ 'options': '-m',
      \ 'down': 12
      \ })
function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"}}}
"NERDTree                                                                                                       {{{2
Plug 'jojoyuji/nerdtree-async' ", { 'on':  'NERDTreeToggle' }
Plug 'nerdtree-execute' ", { 'on':  'NERDTreeToggle' }
Plug 'tyok/nerdtree-ack' " , { 'on':  'NERDTreeToggle' }
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeChDirMode=2
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"closes nerdtree on tab
autocmd FileType NERDTree nmap <tab> q
"map <silent> <leader><tab>  :NERDTreeToggle<cr>
map <bs> :call RcsyncTree()<cr>
map <silent> <leader><tab>  :call RcsyncTree()<cr>
"map <silent> <bs>  :call RcsyncTree()<cr>
map <silent> <leader><leader><tab> <nop>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction
"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0 && !&modifiable
    NERDTreClose
  elseif &modifiable 
    NERDTree %:p:h
  else
    NERDTreeClose
  endif
endfunction

" }}}
"Bookmarking                                                                                                    {{{2 
Plug 'MattesGroeger/vim-bookmarks'

nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mn <Plug>BookmarkNext
nmap <Leader>mb <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
highlight BookmarkSign ctermbg=NONE ctermfg=198
highlight BookmarkLine ctermbg=198 ctermfg=NONE
let g:bookmarking_menu = 1
let g:bookmark_manage_per_buffer = 0
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = 'â™¥'
let g:bookmark_location_list = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nmap <leader>mm :BookmarkToggle<CR>
  nmap <leader>mi :BookmarkAnnotate<CR>
  nmap <leader>mn :BookmarkNext<CR>
  nmap <leader>mp :BookmarkPrev<CR>
  nmap <leader>ma :BookmarkShowAll<CR>
  nmap <leader>mc :BookmarkClear<CR>
  nmap <leader>mx :BookmarkClearAll<CR>
  nmap <leader>mk :BookmarkMoveUp<CR>
  nmap <leader>mj :BookmarkMoveDown<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap <leader>mm
  unmap <leader>mi
  unmap <leader>mn
  unmap <leader>mp
  unmap <leader>ma
  unmap <leader>mc
  unmap <leader>mx
  unmap <leader>mk
  unmap <leader>mj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()

"}}}
" }}}
"Indentation {{{
"Align                                                                                                     {{{2
Plug 'vim-scripts/Align'
if exists(":Align")
  noremap <leader>t :Align 
  noremap <leader>a :Align 
endif
"}}}
Plug 'tommcdo/vim-lion'
Plug 'maksimr/vim-jsbeautify' , { 'for': [ 'html', 'css', 'stylus', 'scss', 'less'] }

Plug 'millermedeiros/vim-esformatter' , { 'for': ['javascript'] , 'do': 'npm install -g esformatter esformatter-jsx'}
"Prettier {{{2
Plug 'prettier/vim-prettier'
" max line lengh that prettier will wrap on
let g:prettier#config#print_width = 80
" number of spaces per indentation level
let g:prettier#config#tab_width = 2
" use tabs over spaces
let g:prettier#config#use_tabs = 'false'
" none|es5|all
let g:prettier#config#trailing_comma = 'none'
"let g:prettier#config#parser = 'flow'
let g:prettier#config#flatten_ternaries = 'true'
let g:prettier#exec_cmd_path = "/usr/local/bin/vue-prettier"

"}}} 

Plug 'itspriddle/vim-javascript-indent', { 'for': 'javascript' }
Plug 'leshill/vim-json'
Plug 'elzr/vim-json' 
Plug 'XadillaX/json-formatter.vim', {'for': 'json', 'do': 'npm install jjson -g'}
Plug 'tpope/vim-jdaddy' ,{'for': 'json'}

"}}}
"SyntaxComplete{{{
"Plug 'w0rp/ale' , { 'do': 'npm install -g eslint_d'}
"nmap <silent> [[ <Plug>(ale_previous_wrap)
"nmap <silent> ]] <Plug>(ale_next_wrap)

""}}}
"Pairing {{{
Plug 'Raimondi/delimitMate'
"show highlights on move between brackets, etc
Plug 'bounceme/poppy.vim' 
let g:poppy_point_enable = 1


"
""}}}
"TextObjects{{{
Plug 'kana/vim-textobj-user'
Plug 'vim-indent-object'
Plug 'textobj-comment'
Plug 'hchbaw/textobj-motionmotion.vim'
Plug 'argtextobj.vim'
Plug 'kana/vim-textobj-lastpat'

"Targets.vim                                                                                                {{{2
Plug 'wellle/targets.vim'
let g:targets_quotes = '"d ''q `'
"}}}
"}}}
"Complete {{{
Plug 'roxma/nvim-completion-manager'
Plug 'roxma/ncm-flow' 
Plug 'roxma/nvim-cm-tern',  {'do': 'npm install'}
Plug 'calebeby/ncm-css'
Plug 'roxma/ncm-github' 
"Plug 'steelsojka/deoplete-flow'

"UltiSnips                                                                                                      {{{2
Plug 'SirVer/ultisnips'
"set runtimepat+=g:configpath."vim/ultisnips_rep"
let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetsDirectories = [g:configpath."vim/UltiSnips"]
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"let g:UltiSnipsDoHash=0

"mapping to allow snippet edition on the fly
noremap  <D-Bslash> :UltiSnipsEdit<cr>
noremap  <leader><leader>\ :UltiSnipsEdit<cr>
"noremap   <D-Bar> :UltiSnipsAddFiletypes
"workaround with youCompleteMe
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction
"youcompleteme mapping
imap <c-j> <c-n>
imap <c-k> <c-p>

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-l>"
"}}}
"Emmet{{{2
Plug 'mattn/emmet-vim', {'for': ['html','css','javascript']}
"let g:user_emmet_leader_key='<C-Q>'
let g:user_emmet_mode='a'

"}}}
"
" Plug 'Shougo/context_filetype.vim'
" Plug 'tyru/caw.vim'
" let g:caw_operator_keymappings=1
" nnoremap <leader>ca <Plug>(caw:hatpos:toggle)

Plug 'scrooloose/nerdcommenter'
"Nerd commenter for .vue files
let g:ft = ''
fu! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        let syn = tolower(syn)
        exe 'setf '.syn
      endif
    endif
  endif
endfu
fu! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    g:ft
  endif
endfu
"}}}
"Utilities{{{
Plug 'romainl/vim-qf'
Plug 'tommcdo/vim-exchange'

"YankStack                                                                                                      Config {{{2
Plug 'maxbrunsfeld/vim-yankstack'
let g:yankstack_map_keys = 1
nmap <c-p> <Plug>yankstack_substitute_older_paste
nmap <c-o> <Plug>yankstack_substitute_newer_paste
imap <c-p> <Plug>yankstack_substitute_older_paste
imap <c-o> <Plug>yankstack_substitute_newer_paste
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D',  'x', 'X', 'y', 'Y']
"}}}
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'splitjoin.vim'

"Switch                                                                                                         {{{2
Plug 'AndrewRadev/switch.vim'
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', "removeClass"],
      \   ['GET', 'POST'] ,
      \   ['get', 'post'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['const', 'let', 'var'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['min', 'max'],
      \   ['unshift', 'push'],
      \   {
      \     '"\(\k\+\)"':                '''\1''',
      \     '''\(\k\+\)''':              '"\1"\2',
      \   }
      \ ]
"}}}
Plug 'vim-scripts/Gundo'
Plug 'tpope/vim-unimpaired'
Plug 'caglartoklu/launchassociated.vim'
Plug 'vim-scripts/matchit.zip'
Plug '29decibel/vim-stringify'
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/webapi-vim'
"Plug 'mattn/gist-vim'
Plug 'lambdalisue/vim-gista'
"Plug 'lambdalisue/vim-gista-ctrlp'
Plug 'diepm/vim-rest-console' 

let g:vrc_curl_opts = {
      \ '--connect-timeout' : 10,
      \ '-L': '',
      \ '-sS': '',
      \ '-i': '',
      \ '--max-time': 60,
      \ '--ipv4': '',
      \ '-k': '',
      \}
"FastFold                                                                                                    Config {{{2
"Plug 'Konfekt/FastFold'
"let g:tex_fold_enabled=1
"let g:vimsyn_folding='af'
"let g:xml_syntax_folding = 1
"let g:php_folding = 1
"let g:perl_fold = 1
"}}}
Plug 'osyo-manga/vim-over'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'wellle/tmux-complete.vim'
Plug 'christoomey/vim-tmux-navigator'

"Vimux {{{2
Plug 'benmills/vimux'
map <leader>nt :call VimuxRunCommand("clear; npm test")<CR>
map <leader>nb :call VimuxRunCommand("clear; gulp bump-version && gulp build")<CR>
map <leader>x :VimuxPromptCommand<CR>
"}}}
"ApiBlueprint {{{2
Plug 'kylef/apiblueprint.vim' , {'do': 'brew install --HEAD  https://raw.github.com/apiaryio/drafter/master/tools/homebrew/drafter.rb'}
autocmd FileType apiblueprint nnoremap <C-b> :call GenerateRefract()<cr>
"}}}

"}}}
"NVIM BOOTIFUL{{{
"Airline                                                                                                      {{{2
Plug 'bling/vim-airline'
"let g:airline_extensions = []
let g:airline_section_error   = 0
let g:airline_section_z = 0     
let g:airline_section_warning = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1

let g:airline_inactive_collapse=1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
"let g:airline_left_sep = "\uE0B4"
"let g:airline_right_sep = "\uE0B6"
"
" for terminals that does not have fontpatched
"let g:airline_left_sep = ' '
"let g:airline_left_alt_sep = ' '
"let g:airline_right_sep = ' '
"let g:airline_right_alt_sep = ' '
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }

"}}}
Plug 'paranoida/vim-airlineish'
"TmuxLine                                                                                                      {{{2
Plug 'edkolev/tmuxline.vim'
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}
if &term =~ '^screen' && exists('$TMUX')
  au VimEnter * if exists(':Tmuxline') | Tmuxline airline_insert | endif
endif 
"}}}

Plug 'junegunn/vim-emoji'
command! Emoji %s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g


"}}}
"Filetype Plug{{{
Plug 'posva/vim-vue'
let g:vue_disable_pre_processors = 1
Plug 'ap/vim-css-color'
Plug 'vim-scripts/SyntaxComplete'


"javascript libs syntax{{{2
Plug 'othree/javascript-libraries-syntax.vim' 
let g:used_javascript_libs = 'underscore,jquery,angularjs,flux,vue,react,lodash,chai,jasmine'		
"}}}
Plug 'moll/vim-node' , {'for': 'javascript'}
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'jojoyuji/vim-javascript', {'for': 'javascript'}
Plug 'Quramy/vim-js-pretty-template', {'for': 'javascript'}
Plug 'heavenshell/vim-jsdoc', {'for': 'javascript'}
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'wavded/vim-stylus', {'for': 'stylus'}
Plug 'tpope/vim-haml'
Plug 'mustache/vim-mustache-handlebars'
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'shime/vim-livedown', {'for': ['md', 'markdown'], 'do': 'npm install -g livedown'}
Plug 'shmargum/vim-sass-colors', {'for': ['sass', 'stylus', 'styl', 'scss']}


"}}}

call plug#end()

nnoremap <leader>vu :call LoadingMsg('Updating plugins...')<cr>:so $MYVIMRC<CR>:PlugUpdate
nnoremap <leader>vi :call LoadingMsg('Installing plugins...')<cr>:so $MYVIMRC<CR>:PlugInstall<cr>
nnoremap <leader>vc :call LoadingMsg('Cleaning plugins...')<cr>:so $MYVIMRC<CR>:PlugClean<cr>

" vim: ts=2 fdm=marker fdl=0 ft=vim :
